{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","constants/index.js","actions/index.js","components/Button/Button.js","components/ImageGrid/ImageGrid.js","components/ImageGrid/index.js","reducers/loadingReducer.js","reducers/imagesReducer.js","reducers/errorReducer.js","reducers/pageReducer.js","reducers/index.js","api/index.js","sagas/imageSaga.js","sagas/index.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["Header","className","href","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","cx","cy","r","Component","IMAGES","setImages","images","type","Button","children","isLoading","props","disabled","defaultProps","ImageGrid","this","loadImages","error","map","image","key","id","Math","ceil","src","urls","small","alt","alt_description","JSON","stringify","onClick","connect","nextPage","dispatch","loadingReducer","state","action","imagesReducer","errorReducer","pageReducer","rootReducer","combineReducers","fetchImages","page","a","fetch","response","json","data","status","Error","errors","handleImagesLoad","watchImagesLoad","getPage","select","call","put","toString","takeEvery","imageSaga","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","rootSaga","consfigureStore","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bf5afa79.chunk.js","sourcesContent":["import Header from \"./Header\";\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Header extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<header>\n\t\t\t\t<div className=\"navbar navbar-dark box-shadow\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref=\"/\"\n\t\t\t\t\t\t\tclassName=\"navbar-brand d-flex align-items-center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\twidth=\"40\"\n\t\t\t\t\t\t\t\theight=\"40\"\n\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\tclassName=\"mr-2\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path>\n\t\t\t\t\t\t\t\t<circle cx=\"12\" cy=\"13\" r=\"4\"></circle>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t<strong>Album</strong>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Header;\n","const IMAGES = {\n  LOAD: \"IMAGES_LOAD\",\n  LOAD_SUCCESS: \"IMAGES_LOAD_SUCCESS\",\n  LOAD_FAIL: \"IMAGES_LOAD_FAIL\",\n};\n\nexport { IMAGES };\n","import { IMAGES } from \"../constants\";\n\nconst loadImages = () => ({\n\ttype: IMAGES.LOAD,\n});\n\nconst setImages = (images) => ({\n\ttype: IMAGES.LOAD_SUCCESS,\n\timages,\n});\n\nconst setError = (error) => ({\n\ttype: IMAGES.LOAD_FAIL,\n\terror,\n});\n\nexport { loadImages, setImages, setError };\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Button = ({ children, isLoading, ...props }) => {\n\treturn (\n\t\t<button\n\t\t\tclassName=\"btn btn-primary btn-lg mb-3 center center-block\"\n\t\t\tdisabled={isLoading}\n\t\t\t{...props}\n\t\t>\n\t\t\t{isLoading ? \"Loading...\" : children}\n\t\t</button>\n\t);\n};\n\nButton.defaultProps = {\n\tisLoading: false,\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loadImages } from \"../../actions\";\nimport Button from \"../Button/Button\";\nimport \"./style.css\";\n\nclass ImageGrid extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.loadImages();\n\t}\n\n\trender() {\n\t\tconst { images, error, isLoading, loadImages } = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"content\">\n\t\t\t\t<section className=\"grid\">\n\t\t\t\t\t{images.map((image) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\t\t\tclassName={`item item-${Math.ceil(\n\t\t\t\t\t\t\t\t\timage.height / image.width\n\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={image.urls.small}\n\t\t\t\t\t\t\t\t\talt={image.alt_description}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</section>\n\t\t\t\t{error && (\n\t\t\t\t\t<div className=\"error mb-5\">{JSON.stringify(error)}</div>\n\t\t\t\t)}\n\t\t\t\t<div>\n\t\t\t\t\t<Button onClick={() => !isLoading && loadImages()}>\n\t\t\t\t\t\tLoad Images\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = ({ isLoading, images, error, nextPage }) => ({\n\tisLoading,\n\timages,\n\terror,\n\tnextPage,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\tloadImages: () => dispatch(loadImages()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageGrid);\n","import ImageGrid from \"./ImageGrid\";\n\nexport default ImageGrid;\n","import { IMAGES } from \"../constants\";\n\nconst loadingReducer = (state = false, action) => {\n\tswitch (action.type) {\n\t\tcase IMAGES.LOAD:\n\t\t\treturn true;\n\n\t\tcase IMAGES.LOAD_SUCCESS:\n\t\t\treturn false;\n\n\t\tcase IMAGES.LOAD_FAIL:\n\t\t\treturn false;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default loadingReducer;\n","import { IMAGES } from \"../constants\";\n\nconst imagesReducer = (state = [], action) => {\n\tswitch (action.type) {\n\t\tcase IMAGES.LOAD_SUCCESS: {\n\t\t\treturn [...state, ...action.images];\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default imagesReducer;\n","import { IMAGES } from \"../constants\";\n\nconst errorReducer = (state = null, action) => {\n\tswitch (action.type) {\n\t\tcase IMAGES.LOAD_FAIL:\n\t\t\treturn action.error;\n\n\t\tcase IMAGES.LOAD:\n\t\tcase IMAGES.LOAD_SUCCESS:\n\t\t\treturn null;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default errorReducer;\n","import { IMAGES } from \"../constants\";\n\nconst pageReducer = (state = 1, action) => {\n\tswitch (action.type) {\n\t\tcase IMAGES.LOAD_SUCCESS:\n\t\t\treturn state + 1;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default pageReducer;\n","import { combineReducers } from \"redux\";\n\nimport loadingReducer from \"./loadingReducer\";\nimport imagesReducer from \"./imagesReducer\";\nimport errorReducer from \"./errorReducer\";\nimport pageReducer from \"./pageReducer\";\n\nconst rootReducer = combineReducers({\n\tisLoading: loadingReducer,\n\timages: imagesReducer,\n\terror: errorReducer,\n\tnextPage: pageReducer,\n});\n\nexport default rootReducer;\n","const URL = \"https://api.unsplash.com/photos\";\nconst KEY = \"?client_id=WatIbCnsXxt0mAS6Y3cXgnwIrZ5uCzNfeiyjXvGxqFc\";\n\nconst fetchImages = async (page) => {\n\tconst response = await fetch(`${URL}${KEY}&per_page=4&page=${page}`);\n\tconst data = await response.json();\n\n\tif (response.status >= 400) {\n\t\tthrow new Error(data.errors);\n\t}\n\n\treturn data;\n};\n\nexport { fetchImages };\n","import { takeEvery, select, call, put } from \"redux-saga/effects\";\nimport { fetchImages } from \"../api\";\nimport { IMAGES } from \"../constants\";\nimport { setImages, setError } from \"../actions\";\n\nconst getPage = (state) => state.nextPage;\n\nfunction* handleImagesLoad() {\n\ttry {\n\t\tconst page = yield select(getPage);\n\t\tconst images = yield call(fetchImages, page);\n\t\tyield put(setImages(images));\n\t} catch (error) {\n\t\tyield put(setError(error.toString()));\n\t}\n}\n\nfunction* watchImagesLoad() {\n\tyield takeEvery(IMAGES.LOAD, handleImagesLoad);\n}\n\nexport default watchImagesLoad;\n","import imageSaga from \"./imageSaga\";\n\nexport default imageSaga;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport ImageGrid from \"./components/ImageGrid\";\nimport { Provider } from \"react-redux\";\nimport consfigureStore from \"./store\";\n\nconst store = consfigureStore();\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<Header />\n\t\t\t<ImageGrid />\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\n\nconst consfigureStore = () => {\n\tconst sagaMiddleware = createSagaMiddleware();\n\n\tconst store = createStore(\n\t\trootReducer,\n\t\tcompose(\n\t\t\tapplyMiddleware(sagaMiddleware),\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ &&\n\t\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__()\n\t\t)\n\t);\n\n\tsagaMiddleware.run(rootSaga);\n\n\treturn store;\n};\n\nexport default consfigureStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}